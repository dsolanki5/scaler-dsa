package Recursion_Bactracking_1;

import java.util.Arrays;
import java.util.List;

/**
 * SIXLETS
 * 
 * Problem Description: Given a array of integers A of size N and an integer B.
 * 	Return number of non-empty subsequences of A of size B having sum <= 1000.
 * 
 * Problem Constraints: 
 * 	1 <= N <= 20
 * 	1 <= A[i] <= 1000
 * 	1 <= B <= N
 * 
 * Input Format: The first argument given is the integer array A. The second argument given is the integer B.
 * Output Format: Return number of subsequences of A of size B having sum <= 1000.
 * 
 * Input 1:  A = [1, 2, 8] B = 2  ||   Input 2: A = [5, 17, 1000, 11] B = 4
 * Output 1: 3		||		Output 2: 0
 * 
 * Explanation 1: {1, 2}, {1, 8}, {2, 8}
 * Explanation 2: No valid subsequence
 * 
 * @author Administrator
 *
 */
public class Sixlets {
	
	public static int solve(List<Integer> A, int B) {
		int ans = 0;
		
		for(int i=0; i<A.size()-1; i++) {
			if(A.size() - i < B)
				break;
			
			ans = getCount(A, B, 0, i, ans);
			
//			if(sum <= 1000)
//				ans++;
		}
				
		return ans;
	}
	
	public static int getCount(List<Integer> A, int B, int sum, int start, int ans) {
		
		if(B == 1) {
			return A.get(start);
		}
		
		while(A.size() - start < B) {
			sum = A.get(start) + getCount(A, B-1, sum, start+1, ans);
			
			if(sum <= 1000)
				ans++;
			
			start++;
		}
				
		return ans;
	}

	public static void main(String[] args) {
		List<Integer> A = Arrays.asList(1, 2, 8); int B = 2;
//		List<Integer> A = Arrays.asList(5, 17, 100, 11); int B = 4;
		
		System.out.println(solve(A, B));

	}

}
