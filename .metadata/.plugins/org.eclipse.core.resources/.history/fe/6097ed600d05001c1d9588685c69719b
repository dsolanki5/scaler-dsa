package IntroToSorting;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Given a array A of non negative integers, arrange them such that they form the largest number.
	Note: The result may be very large, so you need to return a string instead of an integer.
	
	Problem Constraints : 1 <= len(A) <= 100000  ;  0 <= A[i] <= 2*109
	
	Input Format : First argument is an array of integers.
	Output Format : Return a string representing the largest number.
	
	Input 1: A = [3, 30, 34, 5, 9]  ||  Input 2: A = [2, 3, 9, 0]
	Output 1: "9534330"  ||  Output 2: "9320"
	
	Explanation 1: A = [3, 30, 34, 5, 9] 
		Reorder the numbers to [9, 5, 34, 3, 30] to form the largest number.
 	
 	Explanation 2: Reorder the numbers to [9, 3, 2, 0] to form the largest number 9320.
 	 
 * @author Administrator
 *
 */
class LargestNumber {
	
	// DO NOT MODIFY THE LIST. IT IS READ ONLY
    public static String largestNumber(final List<Integer> A) {
    	String ans="";
    	ArrayList<Integer> indxs = new ArrayList<Integer>();
    	int maxIndex = 0;
    	
    	for(int i=0; i<A.size(); i++) {
    		int j=0; int max = Integer.MIN_VALUE;
    		boolean flag = false;
    		
    		while(j<A.size()) {
    			if(!indxs.contains(j)) {
    				int no = A.get(j);
    				if(no > 0) {
    					no=no%10;
        	    		if(no > max ) {
        	    			max = no;
        	    			maxIndex = j;
        	    		}
    				}
    	    		
    			}
	    		j++;
	    			
    		}
    		
    		ans+=A.get(maxIndex);
    		indxs.add(maxIndex);    		
    	}
    	
    	return ans;
    }

 public static void main(String[] args) {
//		List<Integer> A = Arrays.asList(3, 30, 34, 5, 9);
//	 	int n=30;
//	 	int r = n%10;
//	 	System.out.println(r);
//	 	n=n/10;
//	 	int r = n%10;
//	 	System.out.println(n);
//	 	System.out.println(r);
//	 	List<Integer> A = Arrays.asList(2, 3, 9, 0);
	 	List<Integer> A = Arrays.asList(0, 0, 0, 0, 0);
		System.out.println(largestNumber(A));

	}

}
